apply plugin: 'com.android.application'


ext.versionMajor = 2
ext.versionMinor = 5
ext.versionPatch = 0
ext.versionClassifier = null
ext.isSnapshot = false
ext.minimumSdkVersion = 26

def keystorePropertiesFile = rootProject.file("keystore.properties");
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    compileSdkVersion 29

    def versionPropsFile = rootProject.file("version.properties")

    if (versionPropsFile.canRead()) {

        gradle.taskGraph.whenReady { taskGraph ->
            if (taskGraph.hasTask(assembleRelease)) {
                def Properties versionProps = new Properties()

                versionProps.load(new FileInputStream(versionPropsFile))
                def name = versionProps['VERSION_NAME']
                def code = versionProps['VERSION_CODE'].toInteger() + 1
                versionProps['VERSION_CODE'] = code.toString()
                versionProps.store(versionPropsFile.newWriter(), null)
            }
        }

        defaultConfig {
            applicationId "com.darvis.redisandroid"
            minSdkVersion project.ext.minimumSdkVersion
            targetSdkVersion 29
            versionCode generateVersionCode() // 190010203
            versionName generateVersionName() // 2.1.0
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
    }
    else
    {
        throw new GradleException("Could not read version.properties!")
    }
    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }
    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
}

private Integer generateVersionCode() {
    return ext.minimumSdkVersion * 10000000 + ext.versionMajor * 10000 + ext.versionMinor * 100 + ext.versionPatch
}

private String generateVersionName() {
    String versionName = "${ext.versionMajor}.${ext.versionMinor}.${ext.versionPatch}"
    if (ext.versionClassifier == null && ext.isSnapshot) {
        ext.versionClassifier = "BETA"
    }

    if (ext.versionClassifier != null) {
        versionName += "-" + ext.versionClassifier
    }
    return "v" + versionName;
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation files('libs/java-redis-client---javac-1.8.0_171.jar')
}
